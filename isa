#!/usr/bin/perl

use strict;
use warnings 'FATAL' => 'all';
use Getopt::Std;
use vars qw($opt_c);
getopts('c');

## To Do List ##
# Indexed addressing" $truc,X and $truc,Y
# Indirect addressing: ($truc))
# Pre- and post ($truc,X) ($truc),X
# https://www.masswerk.at/6502/6502_instruction_set.html

my $usage = '
Ian\'s Silly Assembler

usage: isa <file> [file...]
options:
  -c  copy-paste output [default is tabular]

syntax:
  line-based
  blank lines are ignored
  lines starting with # are comments
  lines starting with $ reset the address
  lines with tokens are translated
  anything after tokens is comments
  a line starting with - ends the program
';

die $usage if @ARGV == 0;

my %code = (
	'ADC' => {'i' => '69', 'z' => '65', 'a' => '6D'},
	'ASL' => {'i' => '0A', 'z' => '06', 'a' => '0E'},
	'BCC' => {'i' => '90', },
	'BCS' => {'i' => 'B0'},
	'BEQ' => {'i' => 'F0'},
	'BNE' => {'i' => 'D0'},
	'BRK' => {'i' => '00'},
	'CLC' => {'i' => '18'},
	'CMP' => {'i' => 'C9', 'z' => 'C5', 'a' => 'CD'},
	'CPX' => {'i' => 'E0', 'z' => 'E4', 'a' => 'EC'},
	'CPY' => {'i' => 'C0', 'z' => 'C4', 'a' => 'CC'},
	'DEC' => {'z' => 'C6', 'a' => 'CE'},
	'DEX' => {'i' => 'CA'},
	'DEY' => {'i' => '88'},
	'INC' => {'z' => 'E6', 'a' => 'EE'},
	'INX' => {'i' => 'E8'},
	'INY' => {'i' => 'C8'},
	'JMP' => {'a' => '4C', 'n' => '6C'},
	'JSR' => {'a' => '20'},
	'LDA' => {'i' => 'A9', 'z' => 'A5', 'a' => 'AD'},
	'LDX' => {'i' => 'A2', 'z' => 'A6', 'a' => 'AE'},
	'LDY' => {'i' => 'A0', 'z' => 'A4', 'a' => 'AC'},
	'NOP' => {'i' => 'EA'},
	'ROL' => {'a' => '2E', 'z' => '26'},
	'RTS' => {'i' => '60'},
	'STA' => {'z' => '85', 'a' => '8D'},
	'STX' => {'z' => '86', 'a' => '8E'},
	'STY' => {'z' => '84', 'a' => '8C'},
	'TAX' => {'i' => 'AA'},
	'TAY' => {'i' => 'A8'},
	'TSX' => {'i' => 'BA'},
	'TXA' => {'i' => '8A'},
	'TXS' => {'i' => '9A'},
	'TYA' => {'i' => '98'},
);

my $add = '^\$(\w+)';
my $ind = '^([A-Z]{3}) \\(\$(\w{2})(\w{2})\)';
my $abs = '^([A-Z]{3}) \$(\w{2})(\w{2})';
my $zro = '^([A-Z]{3}) \$(\w{2})';
my $imm = '^([A-Z]{3}) #\$(\w{2})';
my $uni = '^([A-Z]{3})';
my $dat = '^(\w{2})';

my $mem;
while (<>) {
	next if /^#/;
	next unless /\S/;
	last if /^\-/;
	chomp;
	if    (/$add/) {$mem = output($1)}
	elsif (/$ind/) {$mem += output($mem, $code{$1}{'n'}, $3, $2, $_)}
	elsif (/$abs/) {$mem += output($mem, $code{$1}{'a'}, $3, $2, $_)}
	elsif (/$zro/) {$mem += output($mem, $code{$1}{'z'}, $2, $_)}
	elsif (/$imm/) {$mem += output($mem, $code{$1}{'i'}, $2, $_)}
	elsif (/$uni/) {$mem += output($mem, $code{$1}{'i'}, $_)}
	elsif (/$dat/) {$mem += data($mem, $1, $_)}
	else           {die "not supported $_"}
}
print "\n" if $opt_c;

sub data {
	my ($mem, $hex, $rem) = @_;
	if ($opt_c) {
		print "$hex ";
	} else {
		print(join("\t", $mem, dec2hex($mem), hex2dex($hex), $rem), "\n");
	}
	return 1
}

sub output {
	if (@_ == 1) {
		my ($mem) = @_;
		if ($opt_c) {print "\n$mem: "}
		return hex2dec(@_);
	} elsif (@_ == 3) {
		my ($mem, $ins, $rem) = @_;
		if ($opt_c) {print "$ins "; return 1}
		$rem =~ s/\s+/ /g;
		print join("\t", $mem, dec2hex($mem), hex2dec($ins), $rem), "\n";
		return 1;
	} elsif (@_ == 4) {
		my ($mem, $ins, $arg, $rem) = @_;
		if ($opt_c) {print "$ins $arg "; return 2}
		$rem =~ s/\s+/ /g;
		print join("\t", $mem,   dec2hex($mem),   hex2dec($ins), $rem), "\n";
		print join("\t", $mem+1, dec2hex($mem+1), hex2dec($arg)), "\n";
		return 2;
	} elsif (@_ == 5) {
		my ($mem, $ins, $a1, $a2, $rem) = @_;
		if ($opt_c) {print "$ins $a1 $a2 "; return 3}
		$rem =~ s/\s+/ /g;
		print join("\t", $mem,   dec2hex($mem),   hex2dec($ins), $rem), "\n";
		print join("\t", $mem+1, dec2hex($mem+1), hex2dec($a1)), "\n";
		print join("\t", $mem+2, dec2hex($mem+2), hex2dec($a2)), "\n";
		return 3;
	}
}

sub hex2dec {return eval "0x$_[0]"}
sub dec2hex {return sprintf("%X", $_[0])}
